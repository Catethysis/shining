
<!DOCTYPE html>
<html lang="en">
<head>
	<title>three.js webgl -STL</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
	<link type="text/css" rel="stylesheet" href="main.css">
</head>
<style>
	.grid-container {
		display: grid;
		grid-template-columns: 3fr 1fr;
		grid-gap: 20px;
	}
	.grid-child {
		height: 100vh;
	}
</style>
<body>
	<script type="module">
		import * as THREE from './threejs/three.module.js';
		import Stats from './threejs/stats.module.js';
		import { STLLoader } from './threejs/STLLoader.js';
		import { OrbitControls } from './threejs/OrbitControls.js'

		// import {MDCRipple} from '@material/ripple';
		// const buttonRipple = new MDCRipple(document.querySelector('.mdc-button'));

		let container, stats, camera, cameraTarget, scene, renderer;
		const mouse = new THREE.Vector2(1, 1);
		let lens = 0, led = 0

		init();
		animate();

		let objects = {};
		function loadSTL (filename, layer, callback) {
			const loader = new STLLoader();
			loader.load(filename, function (geometry) {
				const material = new THREE.MeshPhongMaterial({
					color: 0xff5533, specular: 0x111111, shininess: 200,
					opacity: 0.5, transparent: true,
					side: THREE.DoubleSide,
					// vertexColors: THREE.FaceColors
				});
				let object = new THREE.Mesh(geometry, material);

				object.rotation.set(-Math.PI / 2, 0, 0);
				object.scale.set(0.1, 0.1, 0.1);

				object.castShadow = true;
				object.receiveShadow = true;
				object.layers.enable(layer)

				objects[object.id] = object
				callback(object)
			});
		}

		function init() {
			container = document.getElementById('viewport');
			// console.log(container.clientWidth, container.clientHeight)

			// camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 15);
			camera = new THREE.PerspectiveCamera(35, container.clientWidth / container.clientHeight, 1, 15);
			// camera = new THREE.OrthographicCamera(5, window.innerWidth / window.innerHeight, 0, 150);
			let controls = new OrbitControls(camera, container);
			controls.target = new THREE.Vector3(-0.3, 0.75, 0);
			camera.position.set(3, 0.15, 3);
			controls.update();
			// cameraTarget = new THREE.Vector3(0, 10.25, 0);

			scene = new THREE.Scene();
			scene.background = new THREE.Color(0x72645b);
			var normalMatrix = 0;
			loadSTL('./models/lightguide.stl', 1, (obj) => {
				lens = obj;
				lens.name = "Lightguide"
				lens.position.set(-0.16, 0.1, 0);
				lens.updateMatrixWorld();
				normalMatrix = new THREE.Matrix3().getNormalMatrix(lens.matrixWorld);
				scene.add(lens);
			});
			loadSTL('./models/LED.stl', 2, (obj) => {
				led = obj;
				led.name = "Led"
				led.position.set(-0.075, 0.0, 0.075);
				scene.add(led);
			});

			const draw_line = (points, color) => {
				const linematerial = new THREE.LineBasicMaterial({color, linewidth: 20});
				const linegeometry = new THREE.BufferGeometry().setFromPoints(points);
				const line = new THREE.Line(linegeometry, linematerial);
				scene.add(line);
			}

			draw_line([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0.1, 0, 0)], 0xff0000) // x = r
			draw_line([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0.1, 0)], 0x00ff00) // y = g
			draw_line([new THREE.Vector3(0, 0, 0), new THREE.Vector3(0, 0, 0.1)], 0x0000ff) // z = b

			// Lights
			scene.add(new THREE.HemisphereLight(0x443333, 0x111122));
			addShadowedLight(1, 1, 1, 0xffffff, 1.35);
			addShadowedLight(0.5, 1, -1, 0xffaa00, 1);

			// renderer
			renderer = new THREE.WebGLRenderer({ antialias: true });
			renderer.setPixelRatio(window.devicePixelRatio);
			renderer.setSize(container.clientWidth, container.clientHeight);
			renderer.outputEncoding = THREE.sRGBEncoding;
			renderer.shadowMap.enabled = true;
			container.appendChild(renderer.domElement);

			window.addEventListener('resize', onWindowResize);
			window.addEventListener('mousemove', onMouseMove);
			window.addEventListener('mousedown', onMouseDown);

			const fire = ({pos, d, medium, depth}) => {
				// console.log("===========================", medium, depth)
				raycaster.set(pos, d.normalize())
				// console.log(pos, d.normalize())
				const intersect = raycaster.intersectObjects(scene.children)
				// console.log(intersect[0])
				let collide = 0
				if (intersect[0])
					collide = intersect[0].point
				
				// console.log([pos.clone(), collide])
				// if(collide) draw_line([pos.clone(), collide], 0x0000ff)
				// else draw_line([pos.clone(), pos.clone().add(d.clone().setLength(0.3))], 0xff0000)
				if(collide) draw_line([pos.clone(), collide], medium ? 0xff0000 : 0x0000ff)
				else draw_line([pos.clone(), pos.clone().add(d.clone().setLength(0.3))], medium ? 0xff0000 : 0x0000ff)
				if(depth == 0) return;

				if(collide) {
					let u = 1/1.3
					let n = intersect[0].face.normal.clone().applyMatrix3( normalMatrix ).normalize();
					// let r = d.clone().reflect(n.negate())
					let r = d.clone().add(n.multiplyScalar(-2*d.dot(n)))
					if(medium) {
						u = 1/u;
						// n = n.negate()
					}
					// draw_line([collide, collide.clone().add(n.clone())], 0x00ff00)
					let nd = n.clone().cross(d)
					// console.log(sin_theta, 1/u)
					const delta = 0.001
					if(!isNaN(r.x)) fire({pos: collide.clone().add(r.clone().multiplyScalar(delta)), d: r, medium:     medium, depth: depth - 1})
					let sin_theta = nd.length() / (n.length() * d.length());
					if(sin_theta > 1/u) return;
					let t = n.clone().cross(nd).multiplyScalar(-u).sub(n.clone().multiplyScalar(Math.sqrt(1 - u*u*nd.lengthSq())))
					// console.log(t, r)
					if(!isNaN(t.x)) fire({pos: collide.clone().add(t.clone().multiplyScalar(delta)), d: t, medium: 1 - medium, depth: depth - 1})
				}
			}

			setTimeout(() => {
				// draw_line([new THREE.Vector3(0,0,0), new THREE.Vector3(0.3,0,0)])
				// draw_line([new THREE.Vector3(0,0,0), new THREE.Vector3(0,0.1,0)])
				// draw_line([new THREE.Vector3(0,0,0), new THREE.Vector3(0,0,0.2)])
				let x = 0.0, y = 0.0, delta = 0.1
				console.time()
				for(y = -1.0; y <= 1.0; y += delta)
					for(x = -1.0; x <= 1.0; x += delta)
						fire({pos: new THREE.Vector3(0, -0.0, 0), d: new THREE.Vector3(y, 1, x), medium: 0, depth: 10})
				console.timeEnd()
			}, 100)
		}

		function addShadowedLight(x, y, z, color, intensity) {
			const directionalLight = new THREE.DirectionalLight(color, intensity);
			directionalLight.position.set(x, y, z);
			scene.add(directionalLight);

			directionalLight.castShadow = true;
			const d = 1;
			directionalLight.shadow.camera.left = -d;
			directionalLight.shadow.camera.right = d;
			directionalLight.shadow.camera.top = d;
			directionalLight.shadow.camera.bottom = -d;
			directionalLight.shadow.camera.near = 1;
			directionalLight.shadow.camera.far = 4;
			directionalLight.shadow.bias = -0.002;
		}

		function onWindowResize() {
			// camera.aspect = container.clientWidth / container.clientHeight;
			// camera.updateProjectionMatrix();
			// renderer.setSize(container.clientWidth, container.clientHeight);
		}

		function onMouseMove(event) {
			event.preventDefault();
			mouse.x =  (event.clientX / container.clientWidth ) * 2 - 1;
			mouse.y = -(event.clientY / container.clientHeight) * 2 + 1;
			// console.log(mouse)
		}

		// const 

		const raycaster = new THREE.Raycaster();
		raycaster.layers.set(1);
		function onMouseDown(event) {
			raycaster.setFromCamera(mouse, camera);
			const intersection = raycaster.intersectObjects(scene.children);
			if (intersection.length > 0) {
				const instance = intersection[0]//.instanceId;
				// console.log(instance)
				// const object = objects[intersection[0].object.id]
				// console.log(object)
				// instance.face.color.setRGB( Math.random(),Math.random(), Math.random())
				// console.log(instance)
			}
		}

		function animate() {
			requestAnimationFrame(animate);
			render();
		}

		function render() {
			renderer.render(scene, camera);
		}

		
	</script>

	<div class="grid-container">
		<div class="grid-child" id="viewport"></div>
		<div class="grid-child" id="data">
			<button class="mdc-button mdc-button--raised">
				<span class="mdc-button__label">File</span>
			</button>
		</div>
	</div>
</body>
</html>